# Install influx client library for python
# pip install influxdb-client

import influxdb_client
from influxdb_client.client.write_api import SYNCHRONOUS

bucket = "<bucket>"
org = "<org>"
token = "<token>"
url="http://<url>:8086"
cppOutName = "simulated.cpp"
interval = 0 # Will skip this amount of values, needed if the data is too much for the arduino

if __name__ == "__main__":
    print("Influx data export converter")

    client = influxdb_client.InfluxDBClient(url=url,token=token,org=org)
    query_api = client.query_api()

    out = open( cppOutName, "w")
    out.write("// Generated by data converter.\n\n")
    out.write("float simulatedData [] = {\n")

    query = 'from(bucket: "keezer")\
        |> range(start: -6h)\
        |> filter(fn: (r) => r["_measurement"] == "debug")\
        |> filter(fn: (r) => r["_field"] == "level-raw1")\
        |> filter(fn: (r) => r["device"] == "1f04ac")'

    #   |> filter(fn: (r) => r["device"] == "7376ef")'

    cnt = 0

    result = query_api.query(org=org, query=query)
    for table in result:
        for record in table.records:
            # print( record.get_field(), record.get_time(), record.get_value())

            # Limit the amount of data we use for the tests. Skip the number of values defined in interval. 1 = reduce by 50%
            if cnt >= interval:
                out.write(str(record.get_value()))
                out.write(",\n")
                cnt = 0
            else:
                cnt += 1

    out.write( "-1.0};\n\n") # Mark end of data structure
    out.write( "// EOF\n")
    out.close()
