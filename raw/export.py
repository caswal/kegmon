# Install influx client library for python
# pip install influxdb-client

import influxdb_client
from influxdb_client.client.write_api import SYNCHRONOUS

bucket = "<bucket>"
org = "<org>"
token = "<token>"
url="<url>"
cppOutName = "simulated.hpp"
csvOutName = "simulated.csv"
interval = 0 # Will skip this amount of values, needed if the data is too much for the arduino

if __name__ == "__main__":
    print("Influx data export converter")

    client = influxdb_client.InfluxDBClient(url=url,token=token,org=org)
    query_api = client.query_api()

    cppOut = open( cppOutName, "w")
    cppOut.write("// Generated by data converter.\n")
    cppOut.write("struct ScaleRecord { float scale1; float scale2; float temp; };\n\n");
    cppOut.write("const ScaleRecord simulatedData [] PROGMEM = {\n")

    csvOut = open( csvOutName, "w")
    csvOut.write("time,level-raw1,level-raw2,tempC\n")

    # change the query to include your device id and time-frame
    query = 'from(bucket: "keezer")\
        |> range(start: -4h)\
        |> filter(fn: (r) => r["_measurement"] == "debug")\
        |> filter(fn: (r) => r["device"] == "1f04ac")\
        |> filter(fn: (r) => r["_field"] == "level-raw2" or r["_field"] == "level-raw1" or r["_field"] == "tempC")\
        |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")'
    #   |> filter(fn: (r) => r["device"] == "7376ef")'

    cnt = 0
    line = 0
    # lastTemp = ""
    result = query_api.query(org=org, query=query)
    for table in result:
        for record in table.records:
            print("Processing " + str(line), end="\r")
            line += 1

            if record.values.get("tempC") != None: # Ignore values without temp data
                # if str(record.values.get("tempC")) != lastTemp:
                #    lastTemp = str(record.values.get("tempC"))
                #        csvOut.write(record.get_time().isoformat() + "," + str(record.values.get("level-raw1")) + "," + str(record.values.get("level-raw2")) + "," + str(record.values.get("tempC")) + "\n")

                # Limit the amount of data we use for the tests. Skip the number of values defined in interval. 1 = reduce by 50%
                if cnt >= interval:
                    cppOut.write("{ " + str(record.values.get("level-raw1")) + ", " + str(record.values.get("level-raw2")) + ", " + str(record.values.get("tempC")) + " },\n")
                    csvOut.write(record.get_time().isoformat() + "," + str(record.values.get("level-raw1")) + "," + str(record.values.get("level-raw2")) + "," + str(record.values.get("tempC")) + "\n")
                    cnt = 0
                else:
                    cnt += 1

    print("")
    cppOut.write( "{ -1.0, -1.0, -1.0 } };\n\n") # Mark end of data structure
    cppOut.write( "// EOF\n")
    cppOut.close()

    csvOut.close()
